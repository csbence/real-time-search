package edu.unh.cs.ai.realtimesearch.experiment

import edu.unh.cs.ai.realtimesearch.MetronomeException
import edu.unh.cs.ai.realtimesearch.environment.Action
import edu.unh.cs.ai.realtimesearch.environment.Domain
import edu.unh.cs.ai.realtimesearch.environment.State
import edu.unh.cs.ai.realtimesearch.experiment.configuration.Configurations
import edu.unh.cs.ai.realtimesearch.experiment.configuration.ExperimentConfiguration
import edu.unh.cs.ai.realtimesearch.experiment.configuration.lazyData
import edu.unh.cs.ai.realtimesearch.experiment.configuration.realtime.TerminationType.EXPANSION
import edu.unh.cs.ai.realtimesearch.experiment.configuration.realtime.TerminationType.TIME
import edu.unh.cs.ai.realtimesearch.experiment.result.ExperimentResult
import edu.unh.cs.ai.realtimesearch.experiment.terminationCheckers.TerminationChecker
import edu.unh.cs.ai.realtimesearch.logging.info
import edu.unh.cs.ai.realtimesearch.planner.classical.ClassicalPlanner
import edu.unh.cs.ai.realtimesearch.util.convertNanoUpDouble
import org.slf4j.LoggerFactory
import java.util.concurrent.TimeUnit

/**
 * An experiments meant for classical search, such as depth first search.
 * An single run means requesting the planner to return a plan given an initial state.
 *
 * You can either run experiments on a specific state, or have them randomly
 * generated by the domain.
 *
 * NOTE: assumes the same domain is used to create both the planner as this class
 *
 * @param planner is the planner that is involved in the experiment
 * @param domain is the domain of the planner. Used for random state generation
 * @param initialState is the start state of the planner.
 */
class ClassicalExperiment<StateType : State<StateType>>(val configuration: ExperimentConfiguration,
                                                        val planner: ClassicalPlanner<StateType>,
                                                        val domain: Domain<StateType>,
                                                        val initialState: StateType,
                                                        val terminationChecker: TerminationChecker) : Experiment() {
    private var experimentRunTime: Long = 0

    private val logger = LoggerFactory.getLogger(ClassicalExperiment::class.java)
    private var actions: List<Action> = emptyList()
    private var expansionLimit = configuration.expansionLimit

    override fun run(): ExperimentResult {
        // do experiment on state, either given or randomly created
        val state: StateType = initialState
        //        logger.warn { "Starting experiment with state $state on planner $planner" }

        terminationChecker.resetTo(expansionLimit)

        val cpuNanoTime = measureThreadCpuNanoTime {
            actions = planner.plan(state, terminationChecker)
        }

        experimentRunTime = cpuNanoTime

        val planningTime: Long = when (configuration.terminationType) {
            TIME -> cpuNanoTime
            EXPANSION -> planner.expandedNodeCount.toLong()
            else -> throw MetronomeException("Unknown termination type")
        }

        // log results
        val pathLength = actions.size.toLong() - 1
        logger.info { "Path length: [$pathLength] After ${planner.expandedNodeCount} expanded and ${planner.generatedNodeCount} generated nodes" }

        var currentState = initialState
        // validate path
        actions.forEach {
            currentState = domain.transition(currentState, it) ?: return ExperimentResult(experimentConfiguration = configuration, errorMessage = "Invalid transition. From $currentState with $it")
        }

        val experimentResult = ExperimentResult(
                configuration = configuration,
                expandedNodes = planner.expandedNodeCount,
                generatedNodes = planner.generatedNodeCount,
                planningTime = cpuNanoTime,
                iterationCount = 1,
                actionExecutionTime = pathLength * configuration.actionDuration,
                goalAchievementTime = planningTime + pathLength * configuration.actionDuration,
                idlePlanningTime = planningTime,
                pathLength = pathLength,
                actions = actions.map(Action::toString),
                experimentRunTime = convertNanoUpDouble(planner.executionNanoTime, TimeUnit.SECONDS)
        )

        domain.appendDomainSpecificResults(experimentResult)
        return experimentResult
    }
}