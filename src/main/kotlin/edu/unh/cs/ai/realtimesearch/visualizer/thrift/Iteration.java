/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.unh.cs.ai.realtimesearch.visualizer.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-01")
public class Iteration implements org.apache.thrift.TBase<Iteration, Iteration._Fields>, java.io.Serializable, Cloneable, Comparable<Iteration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Iteration");

  private static final org.apache.thrift.protocol.TField AGENT_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("agentLocation", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CLEAR_PREVIOUS_ENVELOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clearPreviousEnvelope", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_ENVELOPE_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("newEnvelopeNodes", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField CLEAR_PREVIOUS_BACKUP_FIELD_DESC = new org.apache.thrift.protocol.TField("clearPreviousBackup", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField NEW_BACKED_UP_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("newBackedUpNodes", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField PROJECTED_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("projectedPath", org.apache.thrift.protocol.TType.SET, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IterationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IterationTupleSchemeFactory();

  public Location agentLocation; // required
  public boolean clearPreviousEnvelope; // required
  public java.util.Set<Node> newEnvelopeNodes; // required
  public boolean clearPreviousBackup; // optional
  public java.util.Set<Node> newBackedUpNodes; // optional
  public java.util.Set<Location> projectedPath; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    AGENT_LOCATION((short)1, "agentLocation"),
    CLEAR_PREVIOUS_ENVELOPE((short)2, "clearPreviousEnvelope"),
    NEW_ENVELOPE_NODES((short)3, "newEnvelopeNodes"),
    CLEAR_PREVIOUS_BACKUP((short)4, "clearPreviousBackup"),
    NEW_BACKED_UP_NODES((short)5, "newBackedUpNodes"),
    PROJECTED_PATH((short)6, "projectedPath");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // AGENT_LOCATION
          return AGENT_LOCATION;
        case 2: // CLEAR_PREVIOUS_ENVELOPE
          return CLEAR_PREVIOUS_ENVELOPE;
        case 3: // NEW_ENVELOPE_NODES
          return NEW_ENVELOPE_NODES;
        case 4: // CLEAR_PREVIOUS_BACKUP
          return CLEAR_PREVIOUS_BACKUP;
        case 5: // NEW_BACKED_UP_NODES
          return NEW_BACKED_UP_NODES;
        case 6: // PROJECTED_PATH
          return PROJECTED_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLEARPREVIOUSENVELOPE_ISSET_ID = 0;
  private static final int __CLEARPREVIOUSBACKUP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLEAR_PREVIOUS_BACKUP,_Fields.NEW_BACKED_UP_NODES,_Fields.PROJECTED_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AGENT_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("agentLocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.CLEAR_PREVIOUS_ENVELOPE, new org.apache.thrift.meta_data.FieldMetaData("clearPreviousEnvelope", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEW_ENVELOPE_NODES, new org.apache.thrift.meta_data.FieldMetaData("newEnvelopeNodes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class))));
    tmpMap.put(_Fields.CLEAR_PREVIOUS_BACKUP, new org.apache.thrift.meta_data.FieldMetaData("clearPreviousBackup", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEW_BACKED_UP_NODES, new org.apache.thrift.meta_data.FieldMetaData("newBackedUpNodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Node.class))));
    tmpMap.put(_Fields.PROJECTED_PATH, new org.apache.thrift.meta_data.FieldMetaData("projectedPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Iteration.class, metaDataMap);
  }

  public Iteration() {
  }

  public Iteration(
    Location agentLocation,
    boolean clearPreviousEnvelope,
    java.util.Set<Node> newEnvelopeNodes)
  {
    this();
    this.agentLocation = agentLocation;
    this.clearPreviousEnvelope = clearPreviousEnvelope;
    setClearPreviousEnvelopeIsSet(true);
    this.newEnvelopeNodes = newEnvelopeNodes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Iteration(Iteration other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAgentLocation()) {
      this.agentLocation = new Location(other.agentLocation);
    }
    this.clearPreviousEnvelope = other.clearPreviousEnvelope;
    if (other.isSetNewEnvelopeNodes()) {
      java.util.Set<Node> __this__newEnvelopeNodes = new java.util.HashSet<Node>(other.newEnvelopeNodes.size());
      for (Node other_element : other.newEnvelopeNodes) {
        __this__newEnvelopeNodes.add(new Node(other_element));
      }
      this.newEnvelopeNodes = __this__newEnvelopeNodes;
    }
    this.clearPreviousBackup = other.clearPreviousBackup;
    if (other.isSetNewBackedUpNodes()) {
      java.util.Set<Node> __this__newBackedUpNodes = new java.util.HashSet<Node>(other.newBackedUpNodes.size());
      for (Node other_element : other.newBackedUpNodes) {
        __this__newBackedUpNodes.add(new Node(other_element));
      }
      this.newBackedUpNodes = __this__newBackedUpNodes;
    }
    if (other.isSetProjectedPath()) {
      java.util.Set<Location> __this__projectedPath = new java.util.HashSet<Location>(other.projectedPath.size());
      for (Location other_element : other.projectedPath) {
        __this__projectedPath.add(new Location(other_element));
      }
      this.projectedPath = __this__projectedPath;
    }
  }

  public Iteration deepCopy() {
    return new Iteration(this);
  }

  @Override
  public void clear() {
    this.agentLocation = null;
    setClearPreviousEnvelopeIsSet(false);
    this.clearPreviousEnvelope = false;
    this.newEnvelopeNodes = null;
    setClearPreviousBackupIsSet(false);
    this.clearPreviousBackup = false;
    this.newBackedUpNodes = null;
    this.projectedPath = null;
  }

  public Location getAgentLocation() {
    return this.agentLocation;
  }

  public Iteration setAgentLocation(Location agentLocation) {
    this.agentLocation = agentLocation;
    return this;
  }

  public void unsetAgentLocation() {
    this.agentLocation = null;
  }

  /** Returns true if field agentLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentLocation() {
    return this.agentLocation != null;
  }

  public void setAgentLocationIsSet(boolean value) {
    if (!value) {
      this.agentLocation = null;
    }
  }

  public boolean isClearPreviousEnvelope() {
    return this.clearPreviousEnvelope;
  }

  public Iteration setClearPreviousEnvelope(boolean clearPreviousEnvelope) {
    this.clearPreviousEnvelope = clearPreviousEnvelope;
    setClearPreviousEnvelopeIsSet(true);
    return this;
  }

  public void unsetClearPreviousEnvelope() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLEARPREVIOUSENVELOPE_ISSET_ID);
  }

  /** Returns true if field clearPreviousEnvelope is set (has been assigned a value) and false otherwise */
  public boolean isSetClearPreviousEnvelope() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLEARPREVIOUSENVELOPE_ISSET_ID);
  }

  public void setClearPreviousEnvelopeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLEARPREVIOUSENVELOPE_ISSET_ID, value);
  }

  public int getNewEnvelopeNodesSize() {
    return (this.newEnvelopeNodes == null) ? 0 : this.newEnvelopeNodes.size();
  }

  public java.util.Iterator<Node> getNewEnvelopeNodesIterator() {
    return (this.newEnvelopeNodes == null) ? null : this.newEnvelopeNodes.iterator();
  }

  public void addToNewEnvelopeNodes(Node elem) {
    if (this.newEnvelopeNodes == null) {
      this.newEnvelopeNodes = new java.util.HashSet<Node>();
    }
    this.newEnvelopeNodes.add(elem);
  }

  public java.util.Set<Node> getNewEnvelopeNodes() {
    return this.newEnvelopeNodes;
  }

  public Iteration setNewEnvelopeNodes(java.util.Set<Node> newEnvelopeNodes) {
    this.newEnvelopeNodes = newEnvelopeNodes;
    return this;
  }

  public void unsetNewEnvelopeNodes() {
    this.newEnvelopeNodes = null;
  }

  /** Returns true if field newEnvelopeNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNewEnvelopeNodes() {
    return this.newEnvelopeNodes != null;
  }

  public void setNewEnvelopeNodesIsSet(boolean value) {
    if (!value) {
      this.newEnvelopeNodes = null;
    }
  }

  public boolean isClearPreviousBackup() {
    return this.clearPreviousBackup;
  }

  public Iteration setClearPreviousBackup(boolean clearPreviousBackup) {
    this.clearPreviousBackup = clearPreviousBackup;
    setClearPreviousBackupIsSet(true);
    return this;
  }

  public void unsetClearPreviousBackup() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLEARPREVIOUSBACKUP_ISSET_ID);
  }

  /** Returns true if field clearPreviousBackup is set (has been assigned a value) and false otherwise */
  public boolean isSetClearPreviousBackup() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLEARPREVIOUSBACKUP_ISSET_ID);
  }

  public void setClearPreviousBackupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLEARPREVIOUSBACKUP_ISSET_ID, value);
  }

  public int getNewBackedUpNodesSize() {
    return (this.newBackedUpNodes == null) ? 0 : this.newBackedUpNodes.size();
  }

  public java.util.Iterator<Node> getNewBackedUpNodesIterator() {
    return (this.newBackedUpNodes == null) ? null : this.newBackedUpNodes.iterator();
  }

  public void addToNewBackedUpNodes(Node elem) {
    if (this.newBackedUpNodes == null) {
      this.newBackedUpNodes = new java.util.HashSet<Node>();
    }
    this.newBackedUpNodes.add(elem);
  }

  public java.util.Set<Node> getNewBackedUpNodes() {
    return this.newBackedUpNodes;
  }

  public Iteration setNewBackedUpNodes(java.util.Set<Node> newBackedUpNodes) {
    this.newBackedUpNodes = newBackedUpNodes;
    return this;
  }

  public void unsetNewBackedUpNodes() {
    this.newBackedUpNodes = null;
  }

  /** Returns true if field newBackedUpNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNewBackedUpNodes() {
    return this.newBackedUpNodes != null;
  }

  public void setNewBackedUpNodesIsSet(boolean value) {
    if (!value) {
      this.newBackedUpNodes = null;
    }
  }

  public int getProjectedPathSize() {
    return (this.projectedPath == null) ? 0 : this.projectedPath.size();
  }

  public java.util.Iterator<Location> getProjectedPathIterator() {
    return (this.projectedPath == null) ? null : this.projectedPath.iterator();
  }

  public void addToProjectedPath(Location elem) {
    if (this.projectedPath == null) {
      this.projectedPath = new java.util.HashSet<Location>();
    }
    this.projectedPath.add(elem);
  }

  public java.util.Set<Location> getProjectedPath() {
    return this.projectedPath;
  }

  public Iteration setProjectedPath(java.util.Set<Location> projectedPath) {
    this.projectedPath = projectedPath;
    return this;
  }

  public void unsetProjectedPath() {
    this.projectedPath = null;
  }

  /** Returns true if field projectedPath is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectedPath() {
    return this.projectedPath != null;
  }

  public void setProjectedPathIsSet(boolean value) {
    if (!value) {
      this.projectedPath = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case AGENT_LOCATION:
      if (value == null) {
        unsetAgentLocation();
      } else {
        setAgentLocation((Location)value);
      }
      break;

    case CLEAR_PREVIOUS_ENVELOPE:
      if (value == null) {
        unsetClearPreviousEnvelope();
      } else {
        setClearPreviousEnvelope((java.lang.Boolean)value);
      }
      break;

    case NEW_ENVELOPE_NODES:
      if (value == null) {
        unsetNewEnvelopeNodes();
      } else {
        setNewEnvelopeNodes((java.util.Set<Node>)value);
      }
      break;

    case CLEAR_PREVIOUS_BACKUP:
      if (value == null) {
        unsetClearPreviousBackup();
      } else {
        setClearPreviousBackup((java.lang.Boolean)value);
      }
      break;

    case NEW_BACKED_UP_NODES:
      if (value == null) {
        unsetNewBackedUpNodes();
      } else {
        setNewBackedUpNodes((java.util.Set<Node>)value);
      }
      break;

    case PROJECTED_PATH:
      if (value == null) {
        unsetProjectedPath();
      } else {
        setProjectedPath((java.util.Set<Location>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AGENT_LOCATION:
      return getAgentLocation();

    case CLEAR_PREVIOUS_ENVELOPE:
      return isClearPreviousEnvelope();

    case NEW_ENVELOPE_NODES:
      return getNewEnvelopeNodes();

    case CLEAR_PREVIOUS_BACKUP:
      return isClearPreviousBackup();

    case NEW_BACKED_UP_NODES:
      return getNewBackedUpNodes();

    case PROJECTED_PATH:
      return getProjectedPath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AGENT_LOCATION:
      return isSetAgentLocation();
    case CLEAR_PREVIOUS_ENVELOPE:
      return isSetClearPreviousEnvelope();
    case NEW_ENVELOPE_NODES:
      return isSetNewEnvelopeNodes();
    case CLEAR_PREVIOUS_BACKUP:
      return isSetClearPreviousBackup();
    case NEW_BACKED_UP_NODES:
      return isSetNewBackedUpNodes();
    case PROJECTED_PATH:
      return isSetProjectedPath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Iteration)
      return this.equals((Iteration)that);
    return false;
  }

  public boolean equals(Iteration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_agentLocation = true && this.isSetAgentLocation();
    boolean that_present_agentLocation = true && that.isSetAgentLocation();
    if (this_present_agentLocation || that_present_agentLocation) {
      if (!(this_present_agentLocation && that_present_agentLocation))
        return false;
      if (!this.agentLocation.equals(that.agentLocation))
        return false;
    }

    boolean this_present_clearPreviousEnvelope = true;
    boolean that_present_clearPreviousEnvelope = true;
    if (this_present_clearPreviousEnvelope || that_present_clearPreviousEnvelope) {
      if (!(this_present_clearPreviousEnvelope && that_present_clearPreviousEnvelope))
        return false;
      if (this.clearPreviousEnvelope != that.clearPreviousEnvelope)
        return false;
    }

    boolean this_present_newEnvelopeNodes = true && this.isSetNewEnvelopeNodes();
    boolean that_present_newEnvelopeNodes = true && that.isSetNewEnvelopeNodes();
    if (this_present_newEnvelopeNodes || that_present_newEnvelopeNodes) {
      if (!(this_present_newEnvelopeNodes && that_present_newEnvelopeNodes))
        return false;
      if (!this.newEnvelopeNodes.equals(that.newEnvelopeNodes))
        return false;
    }

    boolean this_present_clearPreviousBackup = true && this.isSetClearPreviousBackup();
    boolean that_present_clearPreviousBackup = true && that.isSetClearPreviousBackup();
    if (this_present_clearPreviousBackup || that_present_clearPreviousBackup) {
      if (!(this_present_clearPreviousBackup && that_present_clearPreviousBackup))
        return false;
      if (this.clearPreviousBackup != that.clearPreviousBackup)
        return false;
    }

    boolean this_present_newBackedUpNodes = true && this.isSetNewBackedUpNodes();
    boolean that_present_newBackedUpNodes = true && that.isSetNewBackedUpNodes();
    if (this_present_newBackedUpNodes || that_present_newBackedUpNodes) {
      if (!(this_present_newBackedUpNodes && that_present_newBackedUpNodes))
        return false;
      if (!this.newBackedUpNodes.equals(that.newBackedUpNodes))
        return false;
    }

    boolean this_present_projectedPath = true && this.isSetProjectedPath();
    boolean that_present_projectedPath = true && that.isSetProjectedPath();
    if (this_present_projectedPath || that_present_projectedPath) {
      if (!(this_present_projectedPath && that_present_projectedPath))
        return false;
      if (!this.projectedPath.equals(that.projectedPath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAgentLocation()) ? 131071 : 524287);
    if (isSetAgentLocation())
      hashCode = hashCode * 8191 + agentLocation.hashCode();

    hashCode = hashCode * 8191 + ((clearPreviousEnvelope) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNewEnvelopeNodes()) ? 131071 : 524287);
    if (isSetNewEnvelopeNodes())
      hashCode = hashCode * 8191 + newEnvelopeNodes.hashCode();

    hashCode = hashCode * 8191 + ((isSetClearPreviousBackup()) ? 131071 : 524287);
    if (isSetClearPreviousBackup())
      hashCode = hashCode * 8191 + ((clearPreviousBackup) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNewBackedUpNodes()) ? 131071 : 524287);
    if (isSetNewBackedUpNodes())
      hashCode = hashCode * 8191 + newBackedUpNodes.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectedPath()) ? 131071 : 524287);
    if (isSetProjectedPath())
      hashCode = hashCode * 8191 + projectedPath.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Iteration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAgentLocation()).compareTo(other.isSetAgentLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentLocation, other.agentLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClearPreviousEnvelope()).compareTo(other.isSetClearPreviousEnvelope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearPreviousEnvelope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearPreviousEnvelope, other.clearPreviousEnvelope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewEnvelopeNodes()).compareTo(other.isSetNewEnvelopeNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewEnvelopeNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newEnvelopeNodes, other.newEnvelopeNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClearPreviousBackup()).compareTo(other.isSetClearPreviousBackup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearPreviousBackup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearPreviousBackup, other.clearPreviousBackup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewBackedUpNodes()).compareTo(other.isSetNewBackedUpNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewBackedUpNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newBackedUpNodes, other.newBackedUpNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectedPath()).compareTo(other.isSetProjectedPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectedPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectedPath, other.projectedPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Iteration(");
    boolean first = true;

    sb.append("agentLocation:");
    if (this.agentLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.agentLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clearPreviousEnvelope:");
    sb.append(this.clearPreviousEnvelope);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newEnvelopeNodes:");
    if (this.newEnvelopeNodes == null) {
      sb.append("null");
    } else {
      sb.append(this.newEnvelopeNodes);
    }
    first = false;
    if (isSetClearPreviousBackup()) {
      if (!first) sb.append(", ");
      sb.append("clearPreviousBackup:");
      sb.append(this.clearPreviousBackup);
      first = false;
    }
    if (isSetNewBackedUpNodes()) {
      if (!first) sb.append(", ");
      sb.append("newBackedUpNodes:");
      if (this.newBackedUpNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.newBackedUpNodes);
      }
      first = false;
    }
    if (isSetProjectedPath()) {
      if (!first) sb.append(", ");
      sb.append("projectedPath:");
      if (this.projectedPath == null) {
        sb.append("null");
      } else {
        sb.append(this.projectedPath);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (agentLocation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'agentLocation' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'clearPreviousEnvelope' because it's a primitive and you chose the non-beans generator.
    if (newEnvelopeNodes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newEnvelopeNodes' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (agentLocation != null) {
      agentLocation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IterationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IterationStandardScheme getScheme() {
      return new IterationStandardScheme();
    }
  }

  private static class IterationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Iteration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Iteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // AGENT_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agentLocation = new Location();
              struct.agentLocation.read(iprot);
              struct.setAgentLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLEAR_PREVIOUS_ENVELOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearPreviousEnvelope = iprot.readBool();
              struct.setClearPreviousEnvelopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_ENVELOPE_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set10 = iprot.readSetBegin();
                struct.newEnvelopeNodes = new java.util.HashSet<Node>(2*_set10.size);
                Node _elem11;
                for (int _i12 = 0; _i12 < _set10.size; ++_i12)
                {
                  _elem11 = new Node();
                  _elem11.read(iprot);
                  struct.newEnvelopeNodes.add(_elem11);
                }
                iprot.readSetEnd();
              }
              struct.setNewEnvelopeNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLEAR_PREVIOUS_BACKUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearPreviousBackup = iprot.readBool();
              struct.setClearPreviousBackupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEW_BACKED_UP_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set13 = iprot.readSetBegin();
                struct.newBackedUpNodes = new java.util.HashSet<Node>(2*_set13.size);
                Node _elem14;
                for (int _i15 = 0; _i15 < _set13.size; ++_i15)
                {
                  _elem14 = new Node();
                  _elem14.read(iprot);
                  struct.newBackedUpNodes.add(_elem14);
                }
                iprot.readSetEnd();
              }
              struct.setNewBackedUpNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROJECTED_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                struct.projectedPath = new java.util.HashSet<Location>(2*_set16.size);
                Location _elem17;
                for (int _i18 = 0; _i18 < _set16.size; ++_i18)
                {
                  _elem17 = new Location();
                  _elem17.read(iprot);
                  struct.projectedPath.add(_elem17);
                }
                iprot.readSetEnd();
              }
              struct.setProjectedPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClearPreviousEnvelope()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clearPreviousEnvelope' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Iteration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.agentLocation != null) {
        oprot.writeFieldBegin(AGENT_LOCATION_FIELD_DESC);
        struct.agentLocation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLEAR_PREVIOUS_ENVELOPE_FIELD_DESC);
      oprot.writeBool(struct.clearPreviousEnvelope);
      oprot.writeFieldEnd();
      if (struct.newEnvelopeNodes != null) {
        oprot.writeFieldBegin(NEW_ENVELOPE_NODES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.newEnvelopeNodes.size()));
          for (Node _iter19 : struct.newEnvelopeNodes)
          {
            _iter19.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetClearPreviousBackup()) {
        oprot.writeFieldBegin(CLEAR_PREVIOUS_BACKUP_FIELD_DESC);
        oprot.writeBool(struct.clearPreviousBackup);
        oprot.writeFieldEnd();
      }
      if (struct.newBackedUpNodes != null) {
        if (struct.isSetNewBackedUpNodes()) {
          oprot.writeFieldBegin(NEW_BACKED_UP_NODES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.newBackedUpNodes.size()));
            for (Node _iter20 : struct.newBackedUpNodes)
            {
              _iter20.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.projectedPath != null) {
        if (struct.isSetProjectedPath()) {
          oprot.writeFieldBegin(PROJECTED_PATH_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.projectedPath.size()));
            for (Location _iter21 : struct.projectedPath)
            {
              _iter21.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IterationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IterationTupleScheme getScheme() {
      return new IterationTupleScheme();
    }
  }

  private static class IterationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Iteration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Iteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.agentLocation.write(oprot);
      oprot.writeBool(struct.clearPreviousEnvelope);
      {
        oprot.writeI32(struct.newEnvelopeNodes.size());
        for (Node _iter22 : struct.newEnvelopeNodes)
        {
          _iter22.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClearPreviousBackup()) {
        optionals.set(0);
      }
      if (struct.isSetNewBackedUpNodes()) {
        optionals.set(1);
      }
      if (struct.isSetProjectedPath()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetClearPreviousBackup()) {
        oprot.writeBool(struct.clearPreviousBackup);
      }
      if (struct.isSetNewBackedUpNodes()) {
        {
          oprot.writeI32(struct.newBackedUpNodes.size());
          for (Node _iter23 : struct.newBackedUpNodes)
          {
            _iter23.write(oprot);
          }
        }
      }
      if (struct.isSetProjectedPath()) {
        {
          oprot.writeI32(struct.projectedPath.size());
          for (Location _iter24 : struct.projectedPath)
          {
            _iter24.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Iteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.agentLocation = new Location();
      struct.agentLocation.read(iprot);
      struct.setAgentLocationIsSet(true);
      struct.clearPreviousEnvelope = iprot.readBool();
      struct.setClearPreviousEnvelopeIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set25 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.newEnvelopeNodes = new java.util.HashSet<Node>(2*_set25.size);
        Node _elem26;
        for (int _i27 = 0; _i27 < _set25.size; ++_i27)
        {
          _elem26 = new Node();
          _elem26.read(iprot);
          struct.newEnvelopeNodes.add(_elem26);
        }
      }
      struct.setNewEnvelopeNodesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.clearPreviousBackup = iprot.readBool();
        struct.setClearPreviousBackupIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set28 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.newBackedUpNodes = new java.util.HashSet<Node>(2*_set28.size);
          Node _elem29;
          for (int _i30 = 0; _i30 < _set28.size; ++_i30)
          {
            _elem29 = new Node();
            _elem29.read(iprot);
            struct.newBackedUpNodes.add(_elem29);
          }
        }
        struct.setNewBackedUpNodesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set31 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.projectedPath = new java.util.HashSet<Location>(2*_set31.size);
          Location _elem32;
          for (int _i33 = 0; _i33 < _set31.size; ++_i33)
          {
            _elem32 = new Location();
            _elem32.read(iprot);
            struct.projectedPath.add(_elem32);
          }
        }
        struct.setProjectedPathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

