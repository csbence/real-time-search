/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.unh.cs.ai.realtimesearch.visualizer.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-27")
public class Iteration implements org.apache.thrift.TBase<Iteration, Iteration._Fields>, java.io.Serializable, Cloneable, Comparable<Iteration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Iteration");

  private static final org.apache.thrift.protocol.TField CLEAR_PREVIOUS_FIELD_DESC = new org.apache.thrift.protocol.TField("clearPrevious", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField AGENT_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("agentLocation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NEW_ENVELOPE_NODES_CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("newEnvelopeNodesCells", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECTED_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("projectedPath", org.apache.thrift.protocol.TType.SET, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IterationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IterationTupleSchemeFactory();

  public boolean clearPrevious; // required
  public Location agentLocation; // required
  public java.util.Set<Location> newEnvelopeNodesCells; // required
  public java.util.Set<Location> projectedPath; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLEAR_PREVIOUS((short)1, "clearPrevious"),
    AGENT_LOCATION((short)2, "agentLocation"),
    NEW_ENVELOPE_NODES_CELLS((short)3, "newEnvelopeNodesCells"),
    PROJECTED_PATH((short)4, "projectedPath");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLEAR_PREVIOUS
          return CLEAR_PREVIOUS;
        case 2: // AGENT_LOCATION
          return AGENT_LOCATION;
        case 3: // NEW_ENVELOPE_NODES_CELLS
          return NEW_ENVELOPE_NODES_CELLS;
        case 4: // PROJECTED_PATH
          return PROJECTED_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLEARPREVIOUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROJECTED_PATH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLEAR_PREVIOUS, new org.apache.thrift.meta_data.FieldMetaData("clearPrevious", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AGENT_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("agentLocation", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.NEW_ENVELOPE_NODES_CELLS, new org.apache.thrift.meta_data.FieldMetaData("newEnvelopeNodesCells", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class))));
    tmpMap.put(_Fields.PROJECTED_PATH, new org.apache.thrift.meta_data.FieldMetaData("projectedPath", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Iteration.class, metaDataMap);
  }

  public Iteration() {
  }

  public Iteration(
    boolean clearPrevious,
    Location agentLocation,
    java.util.Set<Location> newEnvelopeNodesCells)
  {
    this();
    this.clearPrevious = clearPrevious;
    setClearPreviousIsSet(true);
    this.agentLocation = agentLocation;
    this.newEnvelopeNodesCells = newEnvelopeNodesCells;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Iteration(Iteration other) {
    __isset_bitfield = other.__isset_bitfield;
    this.clearPrevious = other.clearPrevious;
    if (other.isSetAgentLocation()) {
      this.agentLocation = new Location(other.agentLocation);
    }
    if (other.isSetNewEnvelopeNodesCells()) {
      java.util.Set<Location> __this__newEnvelopeNodesCells = new java.util.HashSet<Location>(other.newEnvelopeNodesCells.size());
      for (Location other_element : other.newEnvelopeNodesCells) {
        __this__newEnvelopeNodesCells.add(new Location(other_element));
      }
      this.newEnvelopeNodesCells = __this__newEnvelopeNodesCells;
    }
    if (other.isSetProjectedPath()) {
      java.util.Set<Location> __this__projectedPath = new java.util.HashSet<Location>(other.projectedPath.size());
      for (Location other_element : other.projectedPath) {
        __this__projectedPath.add(new Location(other_element));
      }
      this.projectedPath = __this__projectedPath;
    }
  }

  public Iteration deepCopy() {
    return new Iteration(this);
  }

  @Override
  public void clear() {
    setClearPreviousIsSet(false);
    this.clearPrevious = false;
    this.agentLocation = null;
    this.newEnvelopeNodesCells = null;
    this.projectedPath = null;
  }

  public boolean isClearPrevious() {
    return this.clearPrevious;
  }

  public Iteration setClearPrevious(boolean clearPrevious) {
    this.clearPrevious = clearPrevious;
    setClearPreviousIsSet(true);
    return this;
  }

  public void unsetClearPrevious() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLEARPREVIOUS_ISSET_ID);
  }

  /** Returns true if field clearPrevious is set (has been assigned a value) and false otherwise */
  public boolean isSetClearPrevious() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLEARPREVIOUS_ISSET_ID);
  }

  public void setClearPreviousIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLEARPREVIOUS_ISSET_ID, value);
  }

  public Location getAgentLocation() {
    return this.agentLocation;
  }

  public Iteration setAgentLocation(Location agentLocation) {
    this.agentLocation = agentLocation;
    return this;
  }

  public void unsetAgentLocation() {
    this.agentLocation = null;
  }

  /** Returns true if field agentLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetAgentLocation() {
    return this.agentLocation != null;
  }

  public void setAgentLocationIsSet(boolean value) {
    if (!value) {
      this.agentLocation = null;
    }
  }

  public int getNewEnvelopeNodesCellsSize() {
    return (this.newEnvelopeNodesCells == null) ? 0 : this.newEnvelopeNodesCells.size();
  }

  public java.util.Iterator<Location> getNewEnvelopeNodesCellsIterator() {
    return (this.newEnvelopeNodesCells == null) ? null : this.newEnvelopeNodesCells.iterator();
  }

  public void addToNewEnvelopeNodesCells(Location elem) {
    if (this.newEnvelopeNodesCells == null) {
      this.newEnvelopeNodesCells = new java.util.HashSet<Location>();
    }
    this.newEnvelopeNodesCells.add(elem);
  }

  public java.util.Set<Location> getNewEnvelopeNodesCells() {
    return this.newEnvelopeNodesCells;
  }

  public Iteration setNewEnvelopeNodesCells(java.util.Set<Location> newEnvelopeNodesCells) {
    this.newEnvelopeNodesCells = newEnvelopeNodesCells;
    return this;
  }

  public void unsetNewEnvelopeNodesCells() {
    this.newEnvelopeNodesCells = null;
  }

  /** Returns true if field newEnvelopeNodesCells is set (has been assigned a value) and false otherwise */
  public boolean isSetNewEnvelopeNodesCells() {
    return this.newEnvelopeNodesCells != null;
  }

  public void setNewEnvelopeNodesCellsIsSet(boolean value) {
    if (!value) {
      this.newEnvelopeNodesCells = null;
    }
  }

  public int getProjectedPathSize() {
    return (this.projectedPath == null) ? 0 : this.projectedPath.size();
  }

  public java.util.Iterator<Location> getProjectedPathIterator() {
    return (this.projectedPath == null) ? null : this.projectedPath.iterator();
  }

  public void addToProjectedPath(Location elem) {
    if (this.projectedPath == null) {
      this.projectedPath = new java.util.HashSet<Location>();
    }
    this.projectedPath.add(elem);
  }

  public java.util.Set<Location> getProjectedPath() {
    return this.projectedPath;
  }

  public Iteration setProjectedPath(java.util.Set<Location> projectedPath) {
    this.projectedPath = projectedPath;
    return this;
  }

  public void unsetProjectedPath() {
    this.projectedPath = null;
  }

  /** Returns true if field projectedPath is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectedPath() {
    return this.projectedPath != null;
  }

  public void setProjectedPathIsSet(boolean value) {
    if (!value) {
      this.projectedPath = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CLEAR_PREVIOUS:
      if (value == null) {
        unsetClearPrevious();
      } else {
        setClearPrevious((java.lang.Boolean)value);
      }
      break;

    case AGENT_LOCATION:
      if (value == null) {
        unsetAgentLocation();
      } else {
        setAgentLocation((Location)value);
      }
      break;

    case NEW_ENVELOPE_NODES_CELLS:
      if (value == null) {
        unsetNewEnvelopeNodesCells();
      } else {
        setNewEnvelopeNodesCells((java.util.Set<Location>)value);
      }
      break;

    case PROJECTED_PATH:
      if (value == null) {
        unsetProjectedPath();
      } else {
        setProjectedPath((java.util.Set<Location>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLEAR_PREVIOUS:
      return isClearPrevious();

    case AGENT_LOCATION:
      return getAgentLocation();

    case NEW_ENVELOPE_NODES_CELLS:
      return getNewEnvelopeNodesCells();

    case PROJECTED_PATH:
      return getProjectedPath();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLEAR_PREVIOUS:
      return isSetClearPrevious();
    case AGENT_LOCATION:
      return isSetAgentLocation();
    case NEW_ENVELOPE_NODES_CELLS:
      return isSetNewEnvelopeNodesCells();
    case PROJECTED_PATH:
      return isSetProjectedPath();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Iteration)
      return this.equals((Iteration)that);
    return false;
  }

  public boolean equals(Iteration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clearPrevious = true;
    boolean that_present_clearPrevious = true;
    if (this_present_clearPrevious || that_present_clearPrevious) {
      if (!(this_present_clearPrevious && that_present_clearPrevious))
        return false;
      if (this.clearPrevious != that.clearPrevious)
        return false;
    }

    boolean this_present_agentLocation = true && this.isSetAgentLocation();
    boolean that_present_agentLocation = true && that.isSetAgentLocation();
    if (this_present_agentLocation || that_present_agentLocation) {
      if (!(this_present_agentLocation && that_present_agentLocation))
        return false;
      if (!this.agentLocation.equals(that.agentLocation))
        return false;
    }

    boolean this_present_newEnvelopeNodesCells = true && this.isSetNewEnvelopeNodesCells();
    boolean that_present_newEnvelopeNodesCells = true && that.isSetNewEnvelopeNodesCells();
    if (this_present_newEnvelopeNodesCells || that_present_newEnvelopeNodesCells) {
      if (!(this_present_newEnvelopeNodesCells && that_present_newEnvelopeNodesCells))
        return false;
      if (!this.newEnvelopeNodesCells.equals(that.newEnvelopeNodesCells))
        return false;
    }

    boolean this_present_projectedPath = true && this.isSetProjectedPath();
    boolean that_present_projectedPath = true && that.isSetProjectedPath();
    if (this_present_projectedPath || that_present_projectedPath) {
      if (!(this_present_projectedPath && that_present_projectedPath))
        return false;
      if (!this.projectedPath.equals(that.projectedPath))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((clearPrevious) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetAgentLocation()) ? 131071 : 524287);
    if (isSetAgentLocation())
      hashCode = hashCode * 8191 + agentLocation.hashCode();

    hashCode = hashCode * 8191 + ((isSetNewEnvelopeNodesCells()) ? 131071 : 524287);
    if (isSetNewEnvelopeNodesCells())
      hashCode = hashCode * 8191 + newEnvelopeNodesCells.hashCode();

    hashCode = hashCode * 8191 + ((isSetProjectedPath()) ? 131071 : 524287);
    if (isSetProjectedPath())
      hashCode = hashCode * 8191 + projectedPath.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Iteration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetClearPrevious()).compareTo(other.isSetClearPrevious());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClearPrevious()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clearPrevious, other.clearPrevious);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAgentLocation()).compareTo(other.isSetAgentLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgentLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agentLocation, other.agentLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewEnvelopeNodesCells()).compareTo(other.isSetNewEnvelopeNodesCells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewEnvelopeNodesCells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newEnvelopeNodesCells, other.newEnvelopeNodesCells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProjectedPath()).compareTo(other.isSetProjectedPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectedPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectedPath, other.projectedPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Iteration(");
    boolean first = true;

    sb.append("clearPrevious:");
    sb.append(this.clearPrevious);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agentLocation:");
    if (this.agentLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.agentLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newEnvelopeNodesCells:");
    if (this.newEnvelopeNodesCells == null) {
      sb.append("null");
    } else {
      sb.append(this.newEnvelopeNodesCells);
    }
    first = false;
    if (isSetProjectedPath()) {
      if (!first) sb.append(", ");
      sb.append("projectedPath:");
      if (this.projectedPath == null) {
        sb.append("null");
      } else {
        sb.append(this.projectedPath);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'clearPrevious' because it's a primitive and you chose the non-beans generator.
    if (agentLocation == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'agentLocation' was not present! Struct: " + toString());
    }
    if (newEnvelopeNodesCells == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newEnvelopeNodesCells' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (agentLocation != null) {
      agentLocation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IterationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IterationStandardScheme getScheme() {
      return new IterationStandardScheme();
    }
  }

  private static class IterationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Iteration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Iteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLEAR_PREVIOUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clearPrevious = iprot.readBool();
              struct.setClearPreviousIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGENT_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.agentLocation = new Location();
              struct.agentLocation.read(iprot);
              struct.setAgentLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEW_ENVELOPE_NODES_CELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.newEnvelopeNodesCells = new java.util.HashSet<Location>(2*_set0.size);
                Location _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = new Location();
                  _elem1.read(iprot);
                  struct.newEnvelopeNodesCells.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setNewEnvelopeNodesCellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECTED_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
                struct.projectedPath = new java.util.HashSet<Location>(2*_set3.size);
                Location _elem4;
                for (int _i5 = 0; _i5 < _set3.size; ++_i5)
                {
                  _elem4 = new Location();
                  _elem4.read(iprot);
                  struct.projectedPath.add(_elem4);
                }
                iprot.readSetEnd();
              }
              struct.setProjectedPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClearPrevious()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clearPrevious' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Iteration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLEAR_PREVIOUS_FIELD_DESC);
      oprot.writeBool(struct.clearPrevious);
      oprot.writeFieldEnd();
      if (struct.agentLocation != null) {
        oprot.writeFieldBegin(AGENT_LOCATION_FIELD_DESC);
        struct.agentLocation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.newEnvelopeNodesCells != null) {
        oprot.writeFieldBegin(NEW_ENVELOPE_NODES_CELLS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.newEnvelopeNodesCells.size()));
          for (Location _iter6 : struct.newEnvelopeNodesCells)
          {
            _iter6.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.projectedPath != null) {
        if (struct.isSetProjectedPath()) {
          oprot.writeFieldBegin(PROJECTED_PATH_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.projectedPath.size()));
            for (Location _iter7 : struct.projectedPath)
            {
              _iter7.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IterationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IterationTupleScheme getScheme() {
      return new IterationTupleScheme();
    }
  }

  private static class IterationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Iteration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Iteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeBool(struct.clearPrevious);
      struct.agentLocation.write(oprot);
      {
        oprot.writeI32(struct.newEnvelopeNodesCells.size());
        for (Location _iter8 : struct.newEnvelopeNodesCells)
        {
          _iter8.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProjectedPath()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetProjectedPath()) {
        {
          oprot.writeI32(struct.projectedPath.size());
          for (Location _iter9 : struct.projectedPath)
          {
            _iter9.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Iteration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.clearPrevious = iprot.readBool();
      struct.setClearPreviousIsSet(true);
      struct.agentLocation = new Location();
      struct.agentLocation.read(iprot);
      struct.setAgentLocationIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.newEnvelopeNodesCells = new java.util.HashSet<Location>(2*_set10.size);
        Location _elem11;
        for (int _i12 = 0; _i12 < _set10.size; ++_i12)
        {
          _elem11 = new Location();
          _elem11.read(iprot);
          struct.newEnvelopeNodesCells.add(_elem11);
        }
      }
      struct.setNewEnvelopeNodesCellsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.projectedPath = new java.util.HashSet<Location>(2*_set13.size);
          Location _elem14;
          for (int _i15 = 0; _i15 < _set13.size; ++_i15)
          {
            _elem14 = new Location();
            _elem14.read(iprot);
            struct.projectedPath.add(_elem14);
          }
        }
        struct.setProjectedPathIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

