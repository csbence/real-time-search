/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.unh.cs.ai.realtimesearch.visualizer.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-02")
public class Init implements org.apache.thrift.TBase<Init, Init._Fields>, java.io.Serializable, Cloneable, Comparable<Init> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Init");

  private static final org.apache.thrift.protocol.TField WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("width", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField HEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("height", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GOALS_FIELD_DESC = new org.apache.thrift.protocol.TField("goals", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField BLOCKED_CELLS_FIELD_DESC = new org.apache.thrift.protocol.TField("blockedCells", org.apache.thrift.protocol.TType.SET, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InitStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InitTupleSchemeFactory();

  public int width; // required
  public int height; // required
  public Location start; // required
  public java.util.List<Location> goals; // required
  public java.util.Set<Location> blockedCells; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WIDTH((short)1, "width"),
    HEIGHT((short)2, "height"),
    START((short)3, "start"),
    GOALS((short)4, "goals"),
    BLOCKED_CELLS((short)5, "blockedCells");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WIDTH
          return WIDTH;
        case 2: // HEIGHT
          return HEIGHT;
        case 3: // START
          return START;
        case 4: // GOALS
          return GOALS;
        case 5: // BLOCKED_CELLS
          return BLOCKED_CELLS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WIDTH_ISSET_ID = 0;
  private static final int __HEIGHT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WIDTH, new org.apache.thrift.meta_data.FieldMetaData("width", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEIGHT, new org.apache.thrift.meta_data.FieldMetaData("height", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.GOALS, new org.apache.thrift.meta_data.FieldMetaData("goals", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class))));
    tmpMap.put(_Fields.BLOCKED_CELLS, new org.apache.thrift.meta_data.FieldMetaData("blockedCells", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Init.class, metaDataMap);
  }

  public Init() {
  }

  public Init(
    int width,
    int height,
    Location start,
    java.util.List<Location> goals,
    java.util.Set<Location> blockedCells)
  {
    this();
    this.width = width;
    setWidthIsSet(true);
    this.height = height;
    setHeightIsSet(true);
    this.start = start;
    this.goals = goals;
    this.blockedCells = blockedCells;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Init(Init other) {
    __isset_bitfield = other.__isset_bitfield;
    this.width = other.width;
    this.height = other.height;
    if (other.isSetStart()) {
      this.start = new Location(other.start);
    }
    if (other.isSetGoals()) {
      java.util.List<Location> __this__goals = new java.util.ArrayList<Location>(other.goals.size());
      for (Location other_element : other.goals) {
        __this__goals.add(new Location(other_element));
      }
      this.goals = __this__goals;
    }
    if (other.isSetBlockedCells()) {
      java.util.Set<Location> __this__blockedCells = new java.util.HashSet<Location>(other.blockedCells.size());
      for (Location other_element : other.blockedCells) {
        __this__blockedCells.add(new Location(other_element));
      }
      this.blockedCells = __this__blockedCells;
    }
  }

  public Init deepCopy() {
    return new Init(this);
  }

  @Override
  public void clear() {
    setWidthIsSet(false);
    this.width = 0;
    setHeightIsSet(false);
    this.height = 0;
    this.start = null;
    this.goals = null;
    this.blockedCells = null;
  }

  public int getWidth() {
    return this.width;
  }

  public Init setWidth(int width) {
    this.width = width;
    setWidthIsSet(true);
    return this;
  }

  public void unsetWidth() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  /** Returns true if field width is set (has been assigned a value) and false otherwise */
  public boolean isSetWidth() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIDTH_ISSET_ID);
  }

  public void setWidthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIDTH_ISSET_ID, value);
  }

  public int getHeight() {
    return this.height;
  }

  public Init setHeight(int height) {
    this.height = height;
    setHeightIsSet(true);
    return this;
  }

  public void unsetHeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  /** Returns true if field height is set (has been assigned a value) and false otherwise */
  public boolean isSetHeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HEIGHT_ISSET_ID);
  }

  public void setHeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HEIGHT_ISSET_ID, value);
  }

  public Location getStart() {
    return this.start;
  }

  public Init setStart(Location start) {
    this.start = start;
    return this;
  }

  public void unsetStart() {
    this.start = null;
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return this.start != null;
  }

  public void setStartIsSet(boolean value) {
    if (!value) {
      this.start = null;
    }
  }

  public int getGoalsSize() {
    return (this.goals == null) ? 0 : this.goals.size();
  }

  public java.util.Iterator<Location> getGoalsIterator() {
    return (this.goals == null) ? null : this.goals.iterator();
  }

  public void addToGoals(Location elem) {
    if (this.goals == null) {
      this.goals = new java.util.ArrayList<Location>();
    }
    this.goals.add(elem);
  }

  public java.util.List<Location> getGoals() {
    return this.goals;
  }

  public Init setGoals(java.util.List<Location> goals) {
    this.goals = goals;
    return this;
  }

  public void unsetGoals() {
    this.goals = null;
  }

  /** Returns true if field goals is set (has been assigned a value) and false otherwise */
  public boolean isSetGoals() {
    return this.goals != null;
  }

  public void setGoalsIsSet(boolean value) {
    if (!value) {
      this.goals = null;
    }
  }

  public int getBlockedCellsSize() {
    return (this.blockedCells == null) ? 0 : this.blockedCells.size();
  }

  public java.util.Iterator<Location> getBlockedCellsIterator() {
    return (this.blockedCells == null) ? null : this.blockedCells.iterator();
  }

  public void addToBlockedCells(Location elem) {
    if (this.blockedCells == null) {
      this.blockedCells = new java.util.HashSet<Location>();
    }
    this.blockedCells.add(elem);
  }

  public java.util.Set<Location> getBlockedCells() {
    return this.blockedCells;
  }

  public Init setBlockedCells(java.util.Set<Location> blockedCells) {
    this.blockedCells = blockedCells;
    return this;
  }

  public void unsetBlockedCells() {
    this.blockedCells = null;
  }

  /** Returns true if field blockedCells is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockedCells() {
    return this.blockedCells != null;
  }

  public void setBlockedCellsIsSet(boolean value) {
    if (!value) {
      this.blockedCells = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case WIDTH:
      if (value == null) {
        unsetWidth();
      } else {
        setWidth((java.lang.Integer)value);
      }
      break;

    case HEIGHT:
      if (value == null) {
        unsetHeight();
      } else {
        setHeight((java.lang.Integer)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((Location)value);
      }
      break;

    case GOALS:
      if (value == null) {
        unsetGoals();
      } else {
        setGoals((java.util.List<Location>)value);
      }
      break;

    case BLOCKED_CELLS:
      if (value == null) {
        unsetBlockedCells();
      } else {
        setBlockedCells((java.util.Set<Location>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WIDTH:
      return getWidth();

    case HEIGHT:
      return getHeight();

    case START:
      return getStart();

    case GOALS:
      return getGoals();

    case BLOCKED_CELLS:
      return getBlockedCells();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WIDTH:
      return isSetWidth();
    case HEIGHT:
      return isSetHeight();
    case START:
      return isSetStart();
    case GOALS:
      return isSetGoals();
    case BLOCKED_CELLS:
      return isSetBlockedCells();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Init)
      return this.equals((Init)that);
    return false;
  }

  public boolean equals(Init that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_width = true;
    boolean that_present_width = true;
    if (this_present_width || that_present_width) {
      if (!(this_present_width && that_present_width))
        return false;
      if (this.width != that.width)
        return false;
    }

    boolean this_present_height = true;
    boolean that_present_height = true;
    if (this_present_height || that_present_height) {
      if (!(this_present_height && that_present_height))
        return false;
      if (this.height != that.height)
        return false;
    }

    boolean this_present_start = true && this.isSetStart();
    boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (!this.start.equals(that.start))
        return false;
    }

    boolean this_present_goals = true && this.isSetGoals();
    boolean that_present_goals = true && that.isSetGoals();
    if (this_present_goals || that_present_goals) {
      if (!(this_present_goals && that_present_goals))
        return false;
      if (!this.goals.equals(that.goals))
        return false;
    }

    boolean this_present_blockedCells = true && this.isSetBlockedCells();
    boolean that_present_blockedCells = true && that.isSetBlockedCells();
    if (this_present_blockedCells || that_present_blockedCells) {
      if (!(this_present_blockedCells && that_present_blockedCells))
        return false;
      if (!this.blockedCells.equals(that.blockedCells))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + width;

    hashCode = hashCode * 8191 + height;

    hashCode = hashCode * 8191 + ((isSetStart()) ? 131071 : 524287);
    if (isSetStart())
      hashCode = hashCode * 8191 + start.hashCode();

    hashCode = hashCode * 8191 + ((isSetGoals()) ? 131071 : 524287);
    if (isSetGoals())
      hashCode = hashCode * 8191 + goals.hashCode();

    hashCode = hashCode * 8191 + ((isSetBlockedCells()) ? 131071 : 524287);
    if (isSetBlockedCells())
      hashCode = hashCode * 8191 + blockedCells.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Init other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWidth()).compareTo(other.isSetWidth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWidth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.width, other.width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHeight()).compareTo(other.isSetHeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.height, other.height);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGoals()).compareTo(other.isSetGoals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goals, other.goals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockedCells()).compareTo(other.isSetBlockedCells());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockedCells()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockedCells, other.blockedCells);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Init(");
    boolean first = true;

    sb.append("width:");
    sb.append(this.width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("height:");
    sb.append(this.height);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    if (this.start == null) {
      sb.append("null");
    } else {
      sb.append(this.start);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goals:");
    if (this.goals == null) {
      sb.append("null");
    } else {
      sb.append(this.goals);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockedCells:");
    if (this.blockedCells == null) {
      sb.append("null");
    } else {
      sb.append(this.blockedCells);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'width' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'height' because it's a primitive and you chose the non-beans generator.
    if (start == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'start' was not present! Struct: " + toString());
    }
    if (goals == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'goals' was not present! Struct: " + toString());
    }
    if (blockedCells == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blockedCells' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (start != null) {
      start.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InitStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InitStandardScheme getScheme() {
      return new InitStandardScheme();
    }
  }

  private static class InitStandardScheme extends org.apache.thrift.scheme.StandardScheme<Init> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Init struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.width = iprot.readI32();
              struct.setWidthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.height = iprot.readI32();
              struct.setHeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.start = new Location();
              struct.start.read(iprot);
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                struct.goals = new java.util.ArrayList<Location>(_list50.size);
                Location _elem51;
                for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                {
                  _elem51 = new Location();
                  _elem51.read(iprot);
                  struct.goals.add(_elem51);
                }
                iprot.readListEnd();
              }
              struct.setGoalsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BLOCKED_CELLS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set53 = iprot.readSetBegin();
                struct.blockedCells = new java.util.HashSet<Location>(2*_set53.size);
                Location _elem54;
                for (int _i55 = 0; _i55 < _set53.size; ++_i55)
                {
                  _elem54 = new Location();
                  _elem54.read(iprot);
                  struct.blockedCells.add(_elem54);
                }
                iprot.readSetEnd();
              }
              struct.setBlockedCellsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetWidth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'width' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHeight()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'height' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Init struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(struct.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(struct.height);
      oprot.writeFieldEnd();
      if (struct.start != null) {
        oprot.writeFieldBegin(START_FIELD_DESC);
        struct.start.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.goals != null) {
        oprot.writeFieldBegin(GOALS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.goals.size()));
          for (Location _iter56 : struct.goals)
          {
            _iter56.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.blockedCells != null) {
        oprot.writeFieldBegin(BLOCKED_CELLS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.blockedCells.size()));
          for (Location _iter57 : struct.blockedCells)
          {
            _iter57.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InitTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InitTupleScheme getScheme() {
      return new InitTupleScheme();
    }
  }

  private static class InitTupleScheme extends org.apache.thrift.scheme.TupleScheme<Init> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Init struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.width);
      oprot.writeI32(struct.height);
      struct.start.write(oprot);
      {
        oprot.writeI32(struct.goals.size());
        for (Location _iter58 : struct.goals)
        {
          _iter58.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.blockedCells.size());
        for (Location _iter59 : struct.blockedCells)
        {
          _iter59.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Init struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.width = iprot.readI32();
      struct.setWidthIsSet(true);
      struct.height = iprot.readI32();
      struct.setHeightIsSet(true);
      struct.start = new Location();
      struct.start.read(iprot);
      struct.setStartIsSet(true);
      {
        org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.goals = new java.util.ArrayList<Location>(_list60.size);
        Location _elem61;
        for (int _i62 = 0; _i62 < _list60.size; ++_i62)
        {
          _elem61 = new Location();
          _elem61.read(iprot);
          struct.goals.add(_elem61);
        }
      }
      struct.setGoalsIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set63 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.blockedCells = new java.util.HashSet<Location>(2*_set63.size);
        Location _elem64;
        for (int _i65 = 0; _i65 < _set63.size; ++_i65)
        {
          _elem64 = new Location();
          _elem64.read(iprot);
          struct.blockedCells.add(_elem64);
        }
      }
      struct.setBlockedCellsIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

